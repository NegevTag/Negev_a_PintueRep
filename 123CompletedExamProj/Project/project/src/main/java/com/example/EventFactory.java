package com.example;

import java.net.UnknownHostException;
import java.sql.Date;
import java.util.Random;

import com.google.gson.Gson;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;

public class EventFactory {
    // Finals
    final static int MAX_MASSAGE_SIZE = 100;
    final static int RAND_STR_OPT = 4;
    final static int MAX_METRIC_VAL = 1000;

    // statics
    private static int nextReporterID = 0;
    private static int nextMetricID = 0;

    // for saving metadata in mongo
    private static MongoClient mongoClient;
    private static DB database;
    private static DBCollection metaDataCollection;

    /**
     * Creats new event with uniuque metricId and reportId. messege generated by
     * suppliers of messages and metricValue
     * 
     * @param messageSupplier   the messege supplier
     * @param metricValSupplier the matric value supplier
     * @return new generated dat
     */
    public static Event create() {
        int nReportId = nextReporterID;
        int nMetricId = nextMetricID;
        Date nTimeStamp = new Date(System.currentTimeMillis());
        int nMetricValue = generateRandMetricVal();
        nextReporterID++;
        nextMetricID++;
        return new Event(nReportId, nTimeStamp, nMetricId, nMetricValue, generateRandomSUString());
    }

    public static void initialize() {
        // mongo stuff
        try {
            mongoClient = new MongoClient(new MongoClientURI(Finals.MONGO_URL));
            // create database.
            database = mongoClient.getDB(Finals.MONGO_DB_NAME);
            // create collection
            metaDataCollection = database.getCollection(Finals.MONGO_COLLECTION_NAME);
            DBObject query = new BasicDBObject();
            DBCursor cursor = metaDataCollection.find(query);
            System.out.println(cursor.one());
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    }

    /**
     * Make Json String that represent the object
     */
    public static String toJson(Event event) {
        Gson g = new Gson();
        return g.toJson(event);
    }

    /**
     * create event from object
     * 
     * @param json the json string
     * @return new event that was generated from json string
     */
    public static Event createFromJson(String json) {
        Gson g = new Gson();
        return g.fromJson(json, Event.class);
    }

    /** generates random string */
    private static String generateRandomSUString() {
        Random rnd = new Random();
        int length = rnd.nextInt(MAX_MASSAGE_SIZE) + 1;
        String str = "";
        for (int i = 0; i < length; i++) {
            switch (rnd.nextInt(RAND_STR_OPT)) {
            case 0:
                str += "-";
                break;
            case 1:
                str += "à¶ž";
            case 2:
                str += "ðŸ—¡";
            case 3:
                str += "ðŸ”«";
            default:
                break;
            }
        }
        return str;
    }

    // this method generates a random metric value(int).
    private static int generateRandMetricVal() {
        Random rnd = new Random();
        return rnd.nextInt(MAX_METRIC_VAL) + 1;

    }
}
